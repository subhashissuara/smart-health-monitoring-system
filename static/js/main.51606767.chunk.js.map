{"version":3,"sources":["routing/DashboardRoute.js","components/NavBar/NavBar.js","components/Sensor/chartColors.js","config/sensorConfigs.js","components/Sensor/DataChartAmbTemp.js","components/Sensor/DataChartBodyTemp.js","components/Sensor/DataChartSpO2.js","components/Sensor/DataChartHR.js","components/Sensor/Sensor.js","components/Dashboard/Dashboard.js","components/LoginScreen/LoginScreen.js","Routes.js","reportWebVitals.js","index.js"],"names":["DashboardRoute","Dashboard","component","rest","render","routeProps","localStorage","getItem","to","Navbar","history","className","exact","onClick","removeItem","push","chartColors","red","lightred","orange","lightorange","yellow","green","blue","lightblue","purple","lightpurple","grey","Patient","details","id","name","dob","gender","age","comorbidity","ambTempChart","color","bgColor","borderColor","chartLabel","xlabelString","ylabelString","bodyTempChart","spo2Chart","hrChart","ecgChart","savedData","onRefresh","chart","config","data","datasets","forEach","dataset","timestamp","x","Date","now","y","sensorValue","DataChartAmbTemp","useEffect","label","backgroundColor","borderWidth","height","options","maintainAspectRatio","responsive","scales","xAxes","scaleLabel","display","labelString","type","realtime","duration","refresh","delay","yAxes","ticks","autoSkip","maxTicksLimit","beginAtZero","tooltips","mode","intersect","hover","DataChartBodyTemp","DataChartSpO2","DataChartHR","Sensor","sensorConfig","sensorData","useState","deviceStatus","setDeviceStatus","classNames","indicatorClass","setIndicatorClass","sensorLastUpdated","setSensorLastUpdated","amb_temp","body_temp","spo2","bpm","sensorValues","setSensorValues","sensorType","DEVICE_IDS","map","elem","toLowerCase","includes","deviceId","toDateString","toLocaleTimeString","replace","DataTimeCheck","setInterval","clearInterval","error","setError","setSensorData","ws","useRef","connectWebSocket","current","WebSocket","PRODUCTION_URL_WS","jsonClientType","onopen","console","log","send","JSON","stringify","onerror","onclose","onmessage","parse","authenticate","a","request_config","headers","Authorization","axios","get","PRODUCTION_URL_AUTHORIZE","setTimeout","close","LoginScreen","email","setEmail","password","setPassword","loginHandler","e","preventDefault","header","post","PRODUCTION_URL_LOGIN","setItem","token","response","onSubmit","htmlFor","required","placeholder","onChange","target","value","tabIndex","autoComplete","Routes","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51606767.chunk.js","sourcesContent":["import { Redirect, Route } from \"react-router-dom\";\r\n\r\nconst DashboardRoute = ({ component: Dashboard, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(routeProps) =>\r\n        localStorage.getItem(\"authToken\") ? (\r\n          <Dashboard {...routeProps} />\r\n        ) : (\r\n          <Redirect to=\"/login\" />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default DashboardRoute;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./NavBar.css\";\r\n\r\nconst Navbar = ({ history }) => {\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"authToken\");\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-container\">\r\n        <NavLink exact to=\"/\" className=\"nav-logo\">\r\n          <h2>Smart Health Monitoring System</h2>\r\n        </NavLink>\r\n        <div className=\"nav-links\">\r\n          <button onClick={logoutHandler} className=\"nav-btn\">\r\n            Logout\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","const chartColors = {\r\n  red: \"rgb(255, 0, 0)\",\r\n  lightred: \"rgb(255, 99, 132)\",\r\n  orange: \"rgb(255, 140, 0)\",\r\n  lightorange: \"rgb(255, 165, 0)\",\r\n  yellow: \"rgb(255, 205, 86)\",\r\n  green: \"rgb(75, 192, 192)\",\r\n  blue: \"rgb(54, 162, 235)\",\r\n  lightblue: \"rgb(55, 255, 255)\",\r\n  purple: \"rgb(153, 102, 255)\",\r\n  lightpurple: \"rgb(204, 153, 255)\",\r\n  grey: \"rgb(201, 203, 207)\",\r\n};\r\n\r\nexport default chartColors;\r\n","import chartColors from \"../components/Sensor/chartColors\";\r\n\r\nexport const Patient = {\r\n  details: {\r\n    id: \"Patient 1\",\r\n    name: \"Name: Subhashis Jha Mohanty\",\r\n    dob: \"Date of Admission: 19-12-2021\",\r\n    gender: \"Gender: Female\",\r\n    age: \"Age: 34\",\r\n    comorbidity: \"Co-mobidity: Diabetes, High Blood Pressure\",\r\n  },\r\n\r\n  ambTempChart: {\r\n    color: {\r\n      bgColor: chartColors.lightpurple,\r\n      borderColor: chartColors.purple,\r\n    },\r\n    chartLabel: \"Ambient Temperature Sensor\",\r\n    xlabelString: \"Today's Time\",\r\n    ylabelString: \"Ambient Temperature\",\r\n  },\r\n\r\n  bodyTempChart: {\r\n    color: {\r\n      bgColor: chartColors.lightorange,\r\n      borderColor: chartColors.orange,\r\n    },\r\n    chartLabel: \"Body Temperature Sensor\",\r\n    xlabelString: \"Today's Time\",\r\n    ylabelString: \"Body Temperature\",\r\n  },\r\n\r\n  spo2Chart: {\r\n    color: {\r\n      bgColor: chartColors.lightblue,\r\n      borderColor: chartColors.blue,\r\n    },\r\n    chartLabel: \"Blood-Pulse Oximeter Sensor\",\r\n    xlabelString: \"Today's Time\",\r\n    ylabelString: \"Oximeter\",\r\n  },\r\n\r\n  hrChart: {\r\n    color: {\r\n      bgColor: chartColors.lightred,\r\n      borderColor: chartColors.red,\r\n    },\r\n    chartLabel: \"Heart-rate Monitor Sensor\",\r\n    xlabelString: \"Today's Time\",\r\n    ylabelString: \"Heartrate\",\r\n  },\r\n\r\n  ecgChart: {\r\n    color: {\r\n      bgColor: chartColors.green,\r\n      borderColor: chartColors.green,\r\n    },\r\n    chartLabel: \"ECG Sensor\",\r\n    xlabelString: \"Today's Time\",\r\n    ylabelString: \"ECG\",\r\n  },\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chartjs-plugin-streaming\";\r\n// import chartColors from \"./chartColors\";\r\nimport \"./DataChart.css\";\r\n\r\nvar savedData = {};\r\n\r\nfunction DataTimeCheck(timestamp) {\r\n  if (Date.now() - timestamp < 2000) {\r\n    return savedData.sensorValue;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction onRefresh(chart) {\r\n  chart.config.data.datasets.forEach(function (dataset) {\r\n    dataset.data.push({\r\n      x: savedData.timestamp || Date.now(),\r\n      y: DataTimeCheck(savedData.timestamp),\r\n    });\r\n  });\r\n}\r\n\r\nconst DataChartAmbTemp = ({ config, timestamp, sensorValue }) => {\r\n  useEffect(() => {\r\n    savedData = { timestamp, sensorValue };\r\n  }, [timestamp, sensorValue]);\r\n\r\n  return (\r\n    <div className=\"data-chart\">\r\n      <Line\r\n        data={{\r\n          datasets: [\r\n            {\r\n              label: config.chartLabel,\r\n              data: [],\r\n              backgroundColor: config.color.bgColor,\r\n              borderColor: config.color.borderColor,\r\n              borderWidth: 4,\r\n            },\r\n          ],\r\n        }}\r\n        height={200}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          responsive: true,\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: config.xlabelString,\r\n                },\r\n                type: \"realtime\",\r\n                realtime: {\r\n                  duration: 30000,\r\n                  refresh: 1000,\r\n                  delay: 2000,\r\n                  onRefresh: onRefresh,\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: config.ylabelString,\r\n                },\r\n                ticks: {\r\n                  autoSkip: true,\r\n                  maxTicksLimit: 10,\r\n                  beginAtZero: true,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n          tooltips: {\r\n            mode: \"nearest\",\r\n            intersect: false,\r\n          },\r\n          hover: {\r\n            mode: \"nearest\",\r\n            intersect: false,\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataChartAmbTemp;\r\n","import React, { useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chartjs-plugin-streaming\";\r\n// import chartColors from \"./chartColors\";\r\nimport \"./DataChart.css\";\r\n\r\nvar savedData = {};\r\n\r\nfunction DataTimeCheck(timestamp) {\r\n  if (Date.now() - timestamp < 2000) {\r\n    return savedData.sensorValue;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction onRefresh(chart) {\r\n  chart.config.data.datasets.forEach(function (dataset) {\r\n    dataset.data.push({\r\n      x: savedData.timestamp || Date.now(),\r\n      y: DataTimeCheck(savedData.timestamp),\r\n    });\r\n  });\r\n}\r\n\r\nconst DataChartBodyTemp = ({ config, timestamp, sensorValue }) => {\r\n  useEffect(() => {\r\n    savedData = { timestamp, sensorValue };\r\n  }, [timestamp, sensorValue]);\r\n\r\n  return (\r\n    <div className=\"data-chart\">\r\n      <Line\r\n        data={{\r\n          datasets: [\r\n            {\r\n              label: config.chartLabel,\r\n              data: [],\r\n              backgroundColor: config.color.bgColor,\r\n              borderColor: config.color.borderColor,\r\n              borderWidth: 4,\r\n            },\r\n          ],\r\n        }}\r\n        height={200}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          responsive: true,\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: config.xlabelString,\r\n                },\r\n                type: \"realtime\",\r\n                realtime: {\r\n                  duration: 30000,\r\n                  refresh: 1000,\r\n                  delay: 2000,\r\n                  onRefresh: onRefresh,\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: config.ylabelString,\r\n                },\r\n                ticks: {\r\n                  autoSkip: true,\r\n                  maxTicksLimit: 10,\r\n                  beginAtZero: true,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n          tooltips: {\r\n            mode: \"nearest\",\r\n            intersect: false,\r\n          },\r\n          hover: {\r\n            mode: \"nearest\",\r\n            intersect: false,\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataChartBodyTemp;\r\n","import React, { useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chartjs-plugin-streaming\";\r\n// import chartColors from \"./chartColors\";\r\nimport \"./DataChart.css\";\r\n\r\nvar savedData = {};\r\n\r\nfunction DataTimeCheck(timestamp) {\r\n  if (Date.now() - timestamp < 2000) {\r\n    return savedData.sensorValue;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction onRefresh(chart) {\r\n  chart.config.data.datasets.forEach(function (dataset) {\r\n    dataset.data.push({\r\n      x: savedData.timestamp || Date.now(),\r\n      y: DataTimeCheck(savedData.timestamp),\r\n    });\r\n  });\r\n}\r\n\r\nconst DataChartSpO2 = ({ config, timestamp, sensorValue }) => {\r\n  useEffect(() => {\r\n    savedData = { timestamp, sensorValue };\r\n  }, [timestamp, sensorValue]);\r\n\r\n  return (\r\n    <div className=\"data-chart\">\r\n      <Line\r\n        data={{\r\n          datasets: [\r\n            {\r\n              label: config.chartLabel,\r\n              data: [],\r\n              backgroundColor: config.color.bgColor,\r\n              borderColor: config.color.borderColor,\r\n              borderWidth: 4,\r\n            },\r\n          ],\r\n        }}\r\n        height={200}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          responsive: true,\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: config.xlabelString,\r\n                },\r\n                type: \"realtime\",\r\n                realtime: {\r\n                  duration: 30000,\r\n                  refresh: 1000,\r\n                  delay: 2000,\r\n                  onRefresh: onRefresh,\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: config.ylabelString,\r\n                },\r\n                ticks: {\r\n                  autoSkip: true,\r\n                  maxTicksLimit: 10,\r\n                  beginAtZero: true,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n          tooltips: {\r\n            mode: \"nearest\",\r\n            intersect: false,\r\n          },\r\n          hover: {\r\n            mode: \"nearest\",\r\n            intersect: false,\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataChartSpO2;\r\n","import React, { useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"chartjs-plugin-streaming\";\r\n// import chartColors from \"./chartColors\";\r\nimport \"./DataChart.css\";\r\n\r\nvar savedData = {};\r\n\r\nfunction DataTimeCheck(timestamp) {\r\n  if (Date.now() - timestamp < 2000) {\r\n    return savedData.sensorValue;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction onRefresh(chart) {\r\n  chart.config.data.datasets.forEach(function (dataset) {\r\n    dataset.data.push({\r\n      x: savedData.timestamp || Date.now(),\r\n      y: DataTimeCheck(savedData.timestamp),\r\n    });\r\n  });\r\n}\r\n\r\nconst DataChartHR = ({ config, timestamp, sensorValue }) => {\r\n  useEffect(() => {\r\n    savedData = { timestamp, sensorValue };\r\n  }, [timestamp, sensorValue]);\r\n\r\n  return (\r\n    <div className=\"data-chart\">\r\n      <Line\r\n        data={{\r\n          datasets: [\r\n            {\r\n              label: config.chartLabel,\r\n              data: [],\r\n              backgroundColor: config.color.bgColor,\r\n              borderColor: config.color.borderColor,\r\n              borderWidth: 4,\r\n            },\r\n          ],\r\n        }}\r\n        height={200}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          responsive: true,\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: config.xlabelString,\r\n                },\r\n                type: \"realtime\",\r\n                realtime: {\r\n                  duration: 30000,\r\n                  refresh: 1000,\r\n                  delay: 2000,\r\n                  onRefresh: onRefresh,\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: config.ylabelString,\r\n                },\r\n                ticks: {\r\n                  autoSkip: true,\r\n                  maxTicksLimit: 10,\r\n                  beginAtZero: true,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n          tooltips: {\r\n            mode: \"nearest\",\r\n            intersect: false,\r\n          },\r\n          hover: {\r\n            mode: \"nearest\",\r\n            intersect: false,\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataChartHR;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport DataChartAmbTemp from \"./DataChartAmbTemp\";\r\nimport DataChartBodyTemp from \"./DataChartBodyTemp\";\r\nimport DataChartSpO2 from \"./DataChartSpO2\";\r\nimport DataChartHR from \"./DataChartHR\";\r\nimport \"./Sensor.css\";\r\nimport classNames from \"classnames\";\r\nimport config from \"../../config/config.json\";\r\n\r\nconst Sensor = ({ sensorConfig, sensorData }) => {\r\n  const [deviceStatus, setDeviceStatus] = useState(\"Offline\");\r\n  const [indicatorClass, setIndicatorClass] = useState(classNames(\"indicator\", \"offline\"));\r\n  const [sensorLastUpdated, setSensorLastUpdated] = useState(\"NA\");\r\n  const [sensorValues, setSensorValues] = useState({\r\n    amb_temp: \"NA\",\r\n    body_temp: \"NA\",\r\n    spo2: \"NA\",\r\n    bpm: \"NA\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (\r\n      sensorData.sensorType &&\r\n      config.DEVICE_IDS.map((elem) => elem.toLowerCase()).includes(sensorData.deviceId.toLowerCase())\r\n    ) {\r\n      setDeviceStatus(\"Online\");\r\n      setIndicatorClass(classNames(\"indicator\", \"online\"));\r\n      if (sensorData.timestamp) {\r\n        setSensorLastUpdated(\r\n          `${new Date(sensorData.timestamp).toDateString()} at ${new Date(sensorData.timestamp)\r\n            .toLocaleTimeString(\"en-IN\")\r\n            .replace(\"am\", \"AM\")\r\n            .replace(\"pm\", \"PM\")}`\r\n        );\r\n      }\r\n    } else {\r\n      setDeviceStatus(\"Offline\");\r\n      setIndicatorClass(classNames(\"indicator\", \"offline\"));\r\n      setSensorLastUpdated(\"NA\");\r\n    }\r\n\r\n    var DataTimeCheck = setInterval(() => {\r\n      if (Date.now() - sensorData.timestamp > 2000) {\r\n        setDeviceStatus(\"Offline\");\r\n        setIndicatorClass(classNames(\"indicator\", \"offline\"));\r\n        setSensorValues({\r\n          amb_temp: \"NA\",\r\n          body_temp: \"NA\",\r\n          spo2: sensorValues.spo2,\r\n          bpm: sensorValues.bpm,\r\n        });\r\n      }\r\n    }, 2000);\r\n\r\n    setSensorValues({\r\n      amb_temp: sensorData.sensorValues\r\n        ? sensorData.sensorValues.amb_temp\r\n          ? sensorData.sensorValues.amb_temp\r\n          : sensorValues.amb_temp\r\n        : \"NA\",\r\n      body_temp: sensorData.sensorValues\r\n        ? sensorData.sensorValues.body_temp\r\n          ? sensorData.sensorValues.body_temp\r\n          : sensorValues.body_temp\r\n        : \"NA\",\r\n      spo2: sensorData.sensorValues\r\n        ? sensorData.sensorValues.spo2\r\n          ? sensorData.sensorValues.spo2\r\n          : sensorValues.spo2\r\n        : \"NA\",\r\n      bpm: sensorData.sensorValues\r\n        ? sensorData.sensorValues.bpm\r\n          ? sensorData.sensorValues.bpm\r\n          : sensorValues.bpm\r\n        : \"NA\",\r\n    });\r\n\r\n    return () => {\r\n      clearInterval(DataTimeCheck);\r\n    };\r\n  }, [sensorData, sensorConfig]);\r\n\r\n  return (\r\n    <div className=\"sensor-container\">\r\n      <div className=\"sensor-text\">\r\n        <div className=\"sensor-text-heading\">\r\n          <h2>{sensorConfig.details.id}</h2>\r\n        </div>\r\n        <div className=\"details-container\">\r\n          <div className=\"patient-metadata-container\">\r\n            <h3>Patient Details</h3>\r\n            <div className=\"patient-metadata\">\r\n              <p>{sensorConfig.details.name}</p>\r\n              <p>{sensorConfig.details.dob}</p>\r\n              <p>{sensorConfig.details.age}</p>\r\n              <p>{sensorConfig.details.gender}</p>\r\n              <p>{sensorConfig.details.comorbidity}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"sensor-details-container\">\r\n            <h3>Sensor Details</h3>\r\n            <div className=\"sensor-details\">\r\n              <p>\r\n                Device Status: {deviceStatus}\r\n                <span className={indicatorClass}></span>\r\n              </p>\r\n              <p>Ambient Temperature: {sensorValues.amb_temp}</p>\r\n              <p>Body Temperature: {sensorValues.body_temp}</p>\r\n              <p>SpO2: {sensorValues.spo2}</p>\r\n              <p>Heart Rate: {sensorValues.bpm}</p>\r\n              <p>Sensor Last Updated: {sensorLastUpdated}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"sensor-chart\">\r\n        <DataChartAmbTemp\r\n          config={sensorConfig.ambTempChart}\r\n          timestamp={sensorData.timestamp}\r\n          sensorValue={sensorValues.amb_temp !== \"NA\" ? sensorValues.amb_temp : null}\r\n        />\r\n        <DataChartBodyTemp\r\n          config={sensorConfig.bodyTempChart}\r\n          timestamp={sensorData.timestamp}\r\n          sensorValue={sensorValues.body_temp !== \"NA\" ? sensorValues.body_temp : null}\r\n        />\r\n        <DataChartSpO2\r\n          config={sensorConfig.spo2Chart}\r\n          timestamp={sensorData.timestamp}\r\n          sensorValue={sensorValues.spo2 !== \"NA\" ? sensorValues.spo2 : null}\r\n        />\r\n        <DataChartHR\r\n          config={sensorConfig.hrChart}\r\n          timestamp={sensorData.timestamp}\r\n          sensorValue={sensorValues.bpm !== \"NA\" ? sensorValues.bpm : null}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sensor;\r\n","import { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Dashboard.css\";\r\nimport Navbar from \"../NavBar/NavBar\";\r\nimport { Patient } from \"../../config/sensorConfigs\";\r\nimport Sensor from \"../Sensor/Sensor\";\r\nimport config from \"../../config/config.json\";\r\n\r\nconst Dashboard = ({ history }) => {\r\n  const [error, setError] = useState(\"\");\r\n  const [sensorData, setSensorData] = useState({});\r\n  const ws = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!localStorage.getItem(\"authToken\")) {\r\n      history.push(\"/login\");\r\n    }\r\n\r\n    const connectWebSocket = () => {\r\n      ws.current = new WebSocket(config.PRODUCTION_URL_WS);\r\n      const jsonClientType = {\r\n        deviceId: \"DASHBOARD\",\r\n        type: \"DASHBOARD\",\r\n      };\r\n\r\n      ws.current.onopen = () => {\r\n        console.log(\"Connected to Server!\");\r\n        ws.current.send(JSON.stringify(jsonClientType));\r\n      };\r\n\r\n      ws.current.onerror = (error) => {\r\n        console.log(`Error: ${error}`);\r\n      };\r\n\r\n      ws.current.onclose = () => {\r\n        console.log(\"Disconnected from Server!\");\r\n        // Implement Reconnecting Method\r\n      };\r\n\r\n      ws.current.onmessage = ({ data }) => {\r\n        // console.log(`Message from Server: ${data}`);\r\n        setSensorData(JSON.parse(data));\r\n      };\r\n    };\r\n\r\n    const authenticate = async () => {\r\n      const request_config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`,\r\n        },\r\n      };\r\n\r\n      try {\r\n        const { data } = await axios.get(config.PRODUCTION_URL_AUTHORIZE, request_config);\r\n        if (data.data === \"ACCESS_GRANTED\") {\r\n          connectWebSocket();\r\n        }\r\n      } catch (error) {\r\n        localStorage.removeItem(\"authToken\");\r\n        setError(\"You are not authorized please login\");\r\n        setTimeout(() => {\r\n          history.push(\"/login\");\r\n        }, 3000);\r\n      }\r\n    };\r\n\r\n    authenticate();\r\n\r\n    return () => {\r\n      if (ws.current) {\r\n        ws.current.close();\r\n      }\r\n    };\r\n  }, [history]);\r\n\r\n  return error ? (\r\n    <span className=\"error-message\">{error}</span>\r\n  ) : (\r\n    <>\r\n      <Navbar history={history} />\r\n      <div className=\"data\">\r\n        <Sensor sensorConfig={Patient} sensorData={sensorData} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport config from \"../../config/config.json\";\r\n// import { Link } from \"react-router-dom\";\r\nimport \"./LoginScreen.css\";\r\n\r\nconst LoginScreen = ({ history }) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"authToken\")) {\r\n      history.push(\"/\");\r\n    }\r\n  }, [history]);\r\n\r\n  const loginHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const request_config = {\r\n      header: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const { data } = await axios.post(config.PRODUCTION_URL_LOGIN, { email, password }, request_config);\r\n\r\n      localStorage.setItem(\"authToken\", data.token);\r\n\r\n      history.push(\"/\");\r\n    } catch (error) {\r\n      setError(error.response.data.error);\r\n      setTimeout(() => {\r\n        setError(\"\");\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-screen\">\r\n      <form onSubmit={loginHandler} className=\"login-screen-form\">\r\n        <h2 className=\"login-screen-title\">Smart Health Monitoring System</h2>\r\n        {error && <span className=\"error-message\">{error}</span>}\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"email\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            required\r\n            id=\"email\"\r\n            placeholder=\"Email address\"\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            value={email}\r\n            tabIndex={1}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            required\r\n            id=\"password\"\r\n            autoComplete=\"true\"\r\n            placeholder=\"Enter your password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            value={password}\r\n            tabIndex={2}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Login\r\n        </button>\r\n\r\n        {/* <span className=\"login-screen-subtext\">\r\n          Don't have an account? <Link to=\"/register\">Register</Link>\r\n        </span> */}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;\r\n","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\n// Routing\r\nimport DashboardRoute from \"./routing/DashboardRoute\";\r\n\r\n// Screens\r\nimport Dashboard from \"./components/Dashboard/Dashboard\";\r\nimport LoginScreen from \"./components/LoginScreen/LoginScreen\";\r\n// import RegisterScreen from \"./components/RegisterScreen/RegisterScreen\";\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <DashboardRoute exact path=\"/\" component={Dashboard} />\r\n        <Route exact path=\"/login\" component={LoginScreen} />\r\n        {/* <Route exact path=\"/register\" component={RegisterScreen} /> */}\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Routes from \"./Routes\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}